<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<context:property-placeholder location="classpath:/rmapcore.properties" ignore-unresolvable="true"/>
	<context:component-scan base-package="info.rmapproject.core"/>
	<context:component-scan base-package="info.rmapproject.kafka"/>

	<bean id="idSupplier" class="info.rmapproject.core.idservice.IdServiceSupplier"/>
    <bean id="rdfHandler" class="info.rmapproject.core.rdfhandler.impl.openrdf.RioRDFHandler"/>

	<bean id="abstractManager" class="info.rmapproject.core.rmapservice.impl.openrdf.ORMapObjectMgr" abstract="true"/>

 	<bean id="resourcemgr" class="info.rmapproject.core.rmapservice.impl.openrdf.ORMapResourceMgr" scope="prototype" parent="abstractManager"/>
 	<bean id="discomgr" class="info.rmapproject.core.rmapservice.impl.openrdf.ORMapDiSCOMgr" scope="prototype" parent="abstractManager"/>
 	<bean id="statementmgr" class="info.rmapproject.core.rmapservice.impl.openrdf.ORMapStatementMgr" scope="prototype" parent="abstractManager"/>
	<!--<bean id="eventmgr" class="info.rmapproject.core.rmapservice.impl.openrdf.ORMapEventMgr" scope="prototype" parent="abstractManager"/>-->
 	<bean id="eventmgr" class="info.rmapproject.core.rmapservice.impl.openrdf.ORMapEventMgr" scope="prototype" parent="abstractManager">
		<constructor-arg value="${rmapcore.producer.topic}"/>
		<constructor-arg ref="producer"/>
	</bean>
 	<bean id="agentmgr" class="info.rmapproject.core.rmapservice.impl.openrdf.ORMapAgentMgr" parent="abstractManager">
		<constructor-arg ref="eventmgr"/>
	</bean>
	<bean id="rmapSearchParams" class="info.rmapproject.core.model.request.RMapSearchParams" scope="prototype" parent="abstractManager"/>

	<bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
		<property name="converters">
			<set>
				<bean class="info.rmapproject.core.model.RMapStatusFilterConverter"/>
				<bean class="info.rmapproject.core.model.OrderByConverter"/>
			</set>
		</property>
	</bean>

	<util:properties id="producerProperties" location="classpath:/kafka-producer.properties"/>

	<bean id="producer" class="org.springframework.kafka.core.KafkaTemplate">
		<!--<constructor-arg ref="producerFactory"/>-->
		<constructor-arg>
			<bean class="info.rmapproject.kafka.shared.JustInTimeConfiguredProducerFactory">
				<constructor-arg ref="producerProperties"/>
				<constructor-arg>
					<bean class="org.apache.kafka.common.serialization.StringSerializer"/>
				</constructor-arg>
				<constructor-arg>
					<bean class="info.rmapproject.kafka.shared.GenericJvmObjectSerializer"/>
				</constructor-arg>
				<property name="properties">
					<list>
						<map>
							<entry key="bootstrap.servers" value="${spring.embedded.kafka.brokers}"/>
						</map>
					</list>
				</property>
			</bean>
		</constructor-arg>
		<property name="defaultTopic" value="${rmapcore.producer.topic}"/>
	</bean>

<!--<beans profile="production-kafka">-->
		<!--<util:properties id="productionProducerProperties" location="classpath:/kafka-producer.properties"/>-->

		<!--<bean id="productionProducer" class="org.springframework.kafka.core.KafkaTemplate">-->
			<!--<constructor-arg>-->
				<!--<bean class="org.springframework.kafka.core.DefaultKafkaProducerFactory">-->
					<!--<constructor-arg ref="productionProducerProperties"/>-->
					<!--<constructor-arg>-->
						<!--<bean class="org.apache.kafka.common.serialization.StringSerializer"/>-->
					<!--</constructor-arg>-->
					<!--<constructor-arg>-->
						<!--<bean class="info.rmapproject.kafka.shared.GenericJvmObjectSerializer"/>-->
					<!--</constructor-arg>-->
				<!--</bean>-->
			<!--</constructor-arg>-->
			<!--<property name="defaultTopic" value="${rmapcore.producer.topic}"/>-->
		<!--</bean>-->
	<!--</beans>-->

	<!--<beans profile="embedded-kafka">-->
		<!--<util:properties id="embeddedProducerProperties" location="classpath:/kafka-producer.properties"/>-->

		<!--<bean id="embeddedProducer" class="org.springframework.kafka.core.KafkaTemplate">-->
			<!--<constructor-arg>-->
				<!--<bean class="org.springframework.kafka.core.DefaultKafkaProducerFactory">-->
					<!--<constructor-arg ref="embeddedProducerProperties"/>-->
					<!--<constructor-arg>-->
						<!--<bean class="org.apache.kafka.common.serialization.StringSerializer"/>-->
					<!--</constructor-arg>-->
					<!--<constructor-arg>-->
						<!--<bean class="info.rmapproject.kafka.shared.GenericJvmObjectSerializer"/>-->
					<!--</constructor-arg>-->
				<!--</bean>-->
			<!--</constructor-arg>-->
			<!--<property name="defaultTopic" value="${rmapcore.producer.topic}"/>-->
		<!--</bean>-->
	<!--</beans>-->

	<!-- production triplestore -->
	<beans profile="http-triplestore">
		<context:property-placeholder location="classpath*:/http-triplestore.properties" ignore-unresolvable="true"/>
		<bean primary="true" id="httpTriplestore" class="info.rmapproject.core.rmapservice.impl.openrdf.triplestore.SesameHttpTriplestore" scope="prototype">
			<property name="sesameUrl" value="${sesamehttp.repository.url}"/>
			<property name="sesameReposName" value="${sesamehttp.repository.name}"/>
			<property name="sesameUserName" value="${sesamehttp.repository.user}"/>
			<property name="sesamePassword" value="${sesamehttp.repository.password}"/>
		</bean>
	</beans>

	<!-- integration triplestore, from integration module -->
	<beans profile="integration-triplestore">
		<import resource="classpath*:/integration-triplestore.xml"/>
	</beans>

	<!-- production id service -->
	<beans profile="http-idservice">
		<context:property-placeholder location="classpath*:/http-idservice.properties" ignore-unresolvable="true"/>
		<bean id="httpUrlIdService" class="info.rmapproject.core.idservice.HttpUrlIdService">
			<property name="serviceUrl" value="${idservice.idMinterUrl}"/>
			<property name="idPrefix" value="${idservice.idPrefix}"/>
			<property name="maxRetryAttempts" value="${idservice.maxRetries}"/>
			<property name="replaceString" value="${idservice.replaceString}"/>
			<property name="userName" value="${idservice.userName}"/>
			<property name="userPassword" value="${idservice.userPassword}"/>
			<property name="idLength" value="${idservice.idLength}"/>
			<property name="idRegex" value="${idservice.idRegex}"/>
		</bean>
	</beans>

	<!-- unit tests and integration tests -->
	<beans profile="inmemory-idservice">
		<context:property-placeholder location="classpath*:/inmemory-idservice.properties" ignore-unresolvable="true"/>
		<bean primary="true" id="inMemoryIdService" class="info.rmapproject.core.idservice.RandomStringIdService">
			<property name="idPrefix" value="${idservice.idPrefix}"/>
			<property name="idLength" value="${idservice.idLength}"/>
			<property name="idRegex" value="${idservice.idRegex}"/>
		</bean>
	</beans>

	<!-- unit tests -->
	<beans profile="inmemory-triplestore">
		<context:property-placeholder location="classpath*:/inmemory-triplestore.properties" ignore-unresolvable="true"/>
		<bean primary="true" id="inMemoryTriplestore" class="info.rmapproject.core.rmapservice.impl.openrdf.triplestore.SesameSailMemoryTriplestore">
			<property name="dataDirectory" value="${sesamesail.dataDirectory}"/>
		</bean>
	</beans>

</beans>
